# -*- coding: utf-8 -*-
import os
import re

import requests
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery
from aiogram.types import Message
from dotenv import load_dotenv
from groq import Groq
from loguru import logger
from telethon import TelegramClient
from telethon.tl.functions.channels import JoinChannelRequest

from scr.bot.system.dispatcher import api_id, api_hash
from scr.bot.system.dispatcher import router

SESSION_NAME = "session_name_1"

load_dotenv(dotenv_path='.env')

GROQ_KEY = os.getenv('GROQ_KEY')  # GROQ_KEY
USER = os.getenv('USER')  # –ª–æ–≥–∏–Ω –¥–ª—è –ø—Ä–æ–∫—Å–∏
PASSWORD = os.getenv('PASSWORD')  # –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–∫—Å–∏
PORT = os.getenv('PORT')  # –ø–æ—Ä—Ç –¥–ª—è –ø—Ä–æ–∫—Å–∏
IP = os.getenv('IP')  # IP –¥–ª—è –ø—Ä–æ–∫—Å–∏

CLIENT_ID = os.getenv('CLIENT_ID')  # CLIENT_ID
CLIENT_SECRET = os.getenv('CLIENT_SECRET')  # CLIENT_SECRET


def setup_proxy():
    # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è HTTP –∏ HTTPS
    os.environ['http_proxy'] = f"http://{USER}:{PASSWORD}@{IP}:{PORT}"
    os.environ['https_proxy'] = f"http://{USER}:{PASSWORD}@{IP}:{PORT}"


async def get_chat_completion(work: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ –ò–ò"""
    setup_proxy()
    try:
        client = Groq(api_key=GROQ_KEY)
        chat_completion = client.chat.completions.create(
            model="meta-llama/llama-4-maverick-17b-128e-instruct",
            messages=[
                {"role": "system",
                 "content": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –∏ –Ω–∞–π–¥–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞. –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –º–Ω–µ –Ω–µ –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å "
                            "–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –º–Ω–µ –Ω—É–∂–µ–Ω –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –±–µ–∑ 1,2,3 –∏ –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞. "
                            "–ù—É–∂–Ω–æ –Ω–µ –±–æ–ª–µ–µ 10 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"},
                {"role": "user", "content": work},  # <-- –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
            ],
        )
        return chat_completion.choices[0].message.content
    except Exception as e:
        logger.exception(e)
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò"


class AnalysisState(StatesGroup):
    link_post = State()


@router.callback_query(lambda c: c.data == "analysis")
async def analysis_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –≤ Telegram –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å—Å–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º:")
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
    await state.set_state(AnalysisState.link_post)
    await callback.answer()


def ai_text_to_list(text: str) -> list[str]:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫.
    –£–±–∏—Ä–∞–µ—Ç –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º.
    """
    return [line.strip() for line in text.splitlines() if line.strip()]


def get_oauth_token():
    logger.debug(f"CLIENT_ID: {CLIENT_ID}, CLIENT_SECRET: {CLIENT_SECRET}")

    url = "https://oauth.yandex.ru/token"
    data = {
        "grant_type": "client_credentials",
        "client_id": CLIENT_ID,
        "client_secret": CLIENT_SECRET,
    }
    response = requests.post(url, data=data)
    if response.status_code == 200:
        return response.json()["access_token"]
    else:
        print("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", response.text)
        return None


def create_wordstat_report(token, keyword: str):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –≤ Wordstat API (Direct API v5)
    """
    url = "https://api.wordstat.yandex.net/v1/topRequests"
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json",
    }

    payload = {
        "phrases": [keyword]  # —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    }

    response = requests.post(url, json=payload, headers=headers)

    if response.status_code == 200:
        data = response.json()
        print("üìä –û—Ç–≤–µ—Ç Wordstat:", data)
        return data
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ:", response.status_code, response.text)
        return None


# –•–µ–Ω–¥–ª–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(AnalysisState.link_post)
async def get_link_post_user(message: Message, state: FSMContext):
    link = message.text.strip()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: {link}")
    # –°–æ—Ö—Ä–∞–Ω–∏–º —Å—Å—ã–ª–∫—É –≤ FSM (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    await state.update_data(link_post=link)
    await state.clear()
    await message.answer(f"‚úÖ –°—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:\n{link}")
    # --- –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫—É ---
    match_public = re.match(r"https://t\.me/([^/]+)/(\d+)", link)
    match_private = re.match(r"https://t\.me/c/(\d+)/(\d+)", link)
    logger.info(f"match_public: {match_public}, match_private: {match_private}")
    channel, message_id = None, None
    if match_public:
        channel = match_public.group(1)  # username –∫–∞–Ω–∞–ª–∞
        message_id = int(match_public.group(2))  # id –ø–æ—Å—Ç–∞
    elif match_private:
        channel_id = int(match_private.group(1))
        message_id = int(match_private.group(2))
        channel = int(f"-100{channel_id}")  # –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ -100XXXXXXXXXX
    else:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –≤–∏–¥–∞ https://t.me/username/123")
        return

    # --- –†–∞–±–æ—Ç–∞–µ–º —Å Telethon ---
    async with TelegramClient(f"scr/setting/{SESSION_NAME}", api_id, api_hash) as client:
        await client.connect()
        try:
            # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–π ‚Äî –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
            if isinstance(channel, str):
                try:
                    await client(JoinChannelRequest(channel))
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è: {e}")
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = await client.get_messages(channel, ids=message_id)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg}")
            post_text = msg.text  # –≤–æ—Ç –∑–¥–µ—Å—å —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
            logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞: {post_text}")
            if not msg:
                await message.answer("‚ö†Ô∏è –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            post_text = msg.text or ""  # .message —É—Å—Ç–∞—Ä–µ–ª–æ, –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å .text
            if not post_text.strip():
                await message.answer("‚ö†Ô∏è –ü–æ—Å—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ (–≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –º–µ–¥–∏–∞).")
                return
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ò–ò –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            ai_answer = await get_chat_completion(work=post_text)
            await message.answer(f"üìå –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n{ai_answer}")
            keywords = ai_text_to_list(ai_answer)
            print(keywords)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å—Ç–∞: {e}")
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å—Ç–∞.")

    token = get_oauth_token()
    if token:
        keyword = "–∫—É–ø–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"
        report = create_wordstat_report(token, keyword)

        print("–û—Ç—á—ë—Ç:", report)


def register_analysis_handler() -> None:
    router.callback_query.register(analysis_callback)
    router.message.register(get_link_post_user, AnalysisState.link_post)
